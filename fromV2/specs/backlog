incrementals ??

1) put opengov branding on the prototype
1) lock microsoft word based on the user role (editor/suggestor/viewer mode)
2) create sections within a document
3) track cursor in a section and give AI contextual awareness
4) field annotation
--insert signatures
--create variables
--programmatically update sections (add automation, control permissions, lock/unlock)
5) remind next approver when it's their turn





















Finalize button (remind next approver)

Law ur

Documentation
Documentation clean-up
-organize documents, all in the doc folder
-don't ever over-write docs folder when reverting, only when committing to a future branch
-rename things
-delete extra files?
-plan for docs, eg readme, installatoin instructions, what's human vs machine
-update readme for public consumptoin



approvals issue
- switch to viewer/editor users on the add-in and the modal shows up empty for approvals
- small 
- cannot check in a document (check in failed to assemble docx data error) on the add-in. can do it no problem on the web
- non-editors can only remind themselves. remind should be available for every user who has not approved


ANNOTATION
-variables
-signature tags

MULTI-EDITOR
-section configuration / automation

STARTUP

CLIPPY














CLEAN UP STATE MATRIX

CLEAN UP DOCUMENTATION

WRITE README

WRITE PROMPTING TO HELP MYSELF



Fix sync issue from jen
--don't auto-update the browser, only pull 
--or always be available to everyone concurrently

currently auto-updating when user loads (I think) - don't auto-update within a single user context

give people the option of editing and not auto-loading upon check-out initialization

jen's feedback: default would be real-time editing and real-time sync and check-out would be the block on that